// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/24/2020 14:44:26"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MU0CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MU0CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
// wires                                               
wire [15:0] beforemux3;
wire exec1;
wire exec2;
wire fetch;
wire [15:0] MERGED;
wire [15:0] out;
wire [15:0] OUTPUT_ACC;
wire [11:0] pcout;
wire [2:0] STATE;

// assign statements (if any)                          
MU0CPU i1 (
// port map - connection between master ports and signals/registers   
	.beforemux3(beforemux3),
	.CLK(CLK),
	.exec1(exec1),
	.exec2(exec2),
	.fetch(fetch),
	.MERGED(MERGED),
	.out(out),
	.OUTPUT_ACC(OUTPUT_ACC),
	.pcout(pcout),
	.STATE(STATE)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 
endmodule

